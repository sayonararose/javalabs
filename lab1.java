// Завдання (варіант 18)
// В залежності від C5 визначити дію, що виконується з матрицею(ями):  C = AB,  де  — побітове виключне “але” 
// В залежності від C7 визначити тип елементів матриці:  short 
// В залежності від C11 визначити дію з матрицею С: Обчислити суму найменших елементів кожного рядка матриці 
// Створити клас, який складається з виконавчого методу, що виконує дію з матрицею(ями) (п.2) із зазначеним типом елементів (п.3) та дію із результуючою матрицею С (п.4).  
// Вивести на екран результати першої та другої дій. Необхідно обробити всі виключні ситуації, що можуть виникнути під час виконання програмного коду.  
// Всі змінні повинні бути описані та значення їх задані у виконавчому методі. Код повинен відповідати стандартам Java Code Conventions (або Google Java Style Guide) 

public class lab1 {

    public static void main(String[] args) {
        // розміри 
        int n = 3, m = 3;

        // матриці
        short[][] a = {
            {2, 5, 7},
            {1, 4, 6},
            {8, 3, 9}
        };

        short[][] b = {
            {9, 1, 4},
            {7, 2, 5},
            {6, 0, 3}
        };

        // результат
        short[][] c = new short[n][m];

        // Обчислюємо C = A XOR B
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                c[i][j] = (short)(a[i][j] ^ b[i][j]);
            }
        }

        // вивід матриці
        System.out.println("Матриця C:");
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                System.out.print(c[i][j]+" ");
            }
            System.out.println();
        }

        // мінімальні елементи
        int sum = 0;
        for(int i=0;i<n;i++){
            short min = c[i][0];
            for(int j=0;j<m;j++){
                if(c[i][j] < min){
                    min = c[i][j];
                }
            }
            sum += min;
        }

        System.out.println("Сума мiнiмальних елементiв: " + sum);
    }
}

